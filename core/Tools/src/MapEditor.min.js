define(["CE","Grid","Map","jquery","ImageLoader","InputNumberVertical","react","reactDom","Math","AbstractGrid","ImageSet"],function(k,g,c,i,l,j,d,f,b,a,e){var h={currentLayer:0,gameEngine:null,tilesetEngine:null,tilesetImageLayer:null,mapAbstractGrid:null,abstractGridLayer:null,map:null,tilesetImage:null,selectedInterval:[],activeLayer:0,reset:function(){var m=this;m.currentLayer=0;m.gameEngine=null;m.tilesetEngine=null;m.tilesetImageLayer=null;m.mapAbstractGrid=null;m.abstractGridLayer=null;m.map=null;m.tilesetImage=null;m.selectedInterval=[];m.activeLayer=0},initialize:function(){console.log("MapEditor initialize...");var v=this;v.reset();var s=32;var o=32;var m=0;var t=0;var r=v.getTilesetEngine();var p=v.getGameEngine();v.tilesetImageLayer=r.createLayer({name:"tileset"});v.tilesetGridLayer=r.createLayer({name:"grid"});for(var n=0;n<10;n++){p.createLayer({name:"layer-"+n})}i("#tileset").change(function(){var w=i(this).val();l.load(w,function(x){v.tilesetImage=w;r.clearAllLayers();m=x.width;t=x.height;r.applyToLayers({width:m,height:t});v.tilesetImageLayer.drawImage(x,0,0);r.updateGrid({sw:s,sh:o,width:m,height:t})})});i("#tileset").change();f.render(<div className="row">
                        <div className="col-md-6">
                            <label>Largura(px)</label>
                            <InputNumberVertical min={32} value={32} max={1000} onChange={v.widthGridChange}/>
                        </div>
                        <div className="col-md-6">
                            <label>Altura(px)</label>
                            <InputNumberVertical min={32} value={32} max={1000} onChange={v.heightGridChange}/>
                        </div>
                    </div>,document.getElementById("input-container"));var q=b.ceil(p.getWidth()/32);var u=b.ceil(p.getHeight()/32);f.render(<div className="row">
                        <div className="col-md-12">
                            <div className="col-md-4">
                                <label>Largura(steps)</label>
                                <InputNumberVertical min={5} value={q} max={1000} onChange={v.widthMapChange}/>
                            </div>
                            <div className="col-md-4">
                                <label>Altura(steps)</label>
                                <InputNumberVertical min={5} value={u} max={1000} onChange={v.heightMapChange}/>
                            </div>
                            <div className="col-md-4">
                                <label>Camada</label>
                                <InputNumberVertical min={1} value={1} max={10} onChange={v.changeLayer}/>
                            </div>
                        </div>
                        <div className="col-md-12">
                            <div className="col-md-4">
                                <div className="checkbox">
                                    <label>
                                        <input type="checkbox" onChange={v.showGrid}/>Mostrar Grade
                                    </label>
                                </div>
                                <div className="checkbox">
                                    <label>
                                        <input type="checkbox" onChange={v.showLayers}/>Mostrar Camadas
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>,document.getElementById("canvas-input"));p.renderMap(v.getMap());i(window).resize(function(){v.fixPos()});p.updateGrid({sw:32,sh:32,width:p.getWidth(),height:p.getHeight(),opacity:0.1})},changeLayer:function(p){var n=h;n.activeLayer=p;var m=n.getGameEngine();var o=n.gameEngine.getLayer(p);o.set({opacity:1});n.gameEngine.applyToLayers({opacity:0.5},function(){return this.zIndex!=n.activeLayer})},showLayers:function(){h.getGameEngine().applyToLayers({opacity:1})},widthMapChange:function(p){var n=this;var q=h.getMap();var o=h.getMapAbstractGrid();var m=h.getGameEngine();m.applyToLayers({width:p*q.tile_w});h.fixPos();m.renderMap(q);h.getAbstractGridLayer().clear().drawAbstractGrid(o)},heightMapChange:function(m){var o=h.getMapAbstractGrid();var p=h.getMap();var n=h.getGameEngine();n.applyToLayers({height:m*p.tile_h});h.fixPos();h.getGameEngine().renderMap(p);h.getAbstractGridLayer().clear().drawAbstractGrid(o)},showGrid:function(m){if(i(m.target).is(":checked")){h.getAbstractGridLayer().show()}else{h.getAbstractGridLayer().hide()}},getAbstractGridLayer:function(){var m=this;if(m.abstractGridLayer==null){var n=m.getMap();m.abstractGridLayer=m.getGameEngine().getGridLayer();m.abstractGridLayer.set({width:n.width*n.tile_w,height:n.height*n.tile_h}).drawAbstractGrid(m.getMapAbstractGrid())}return m.abstractGridLayer},widthGridChange:function(n){var m=this;h.getTilesetEngine().updateGrid({sw:n})},heightGridChange:function(n){var m=this;h.getTilesetEngine().updateGrid({sh:n})},getMapAbstractGrid:function(){var m=this;if(m.mapAbstractGrid==null){var n=m.getMap();m.mapAbstractGrid=new a({width:n.width*n.tile_w,height:n.height*n.tile_h,sw:n.tile_w,sh:n.tile_h})}return m.mapAbstractGrid},getTilesetEngine:function(){var m=this;if(m.tilesetEngine===null){m.tilesetEngine=k.createEngine({container:"#tileset-grid",width:"100%",height:665,draggable:true,selectable:true,multiSelect:true,scalable:true});m.tilesetEngine.onAreaSelect(function(s,r){var n=this.getMouseReader();if(n.left){var t=r.getRectsFromArea(s);var q=r.getAreaInterval(s);r.apply({fillStyle:"transparent",state:0});t.forEach(function(u){u.set({fillStyle:"rgba(0,0,100,0.5)",state:1})});m.selectedInterval=q}else{var p=r.getRectsFromArea(s);if(p.length>0){var o=p[0];r.apply({fillStyle:"transparent"},function(){return this.state!=1});o.set({fillStyle:"rgba(0,0,100,0.5)"})}}})}return m.tilesetEngine},getGameEngine:function(){var m=this;if(m.gameEngine==null){m.gameEngine=k.createEngine({container:"#canvas-container",width:"100%",height:700,draggable:true,scalable:true});var p=m.gameEngine;var o=m;var n=function(C){var A=this;if(A.right){h.getAbstractGridLayer().clear().drawAbstractGrid(h.getMapAbstractGrid())}else{if(A.left){var q=h.getMap();var v=h.tilesetImage;var s=h.selectedInterval;var r=p.getDrawedArea();var y=q.getAreaInterval(r);var u=[];var z=p.getLayer(h.activeLayer);for(var x=y.si,D=s.si;x<=y.ei;x++){if(u[x]==undefined){u[x]=[]}for(var w=y.sj,t=s.sj;w<=y.ej;w++){var B=new e({url:v,width:q.tile_w,height:q.tile_h,sWidth:q.tile_w,sHeight:q.tile_h,sx:t*q.tile_w,sy:D*q.tile_h,x:w*q.tile_w,y:x*q.tile_h,layer:h.activeLayer});z.clearRect(B.x,B.y,B.width,B.height);z.drawImageSet(B);u[x][w]=B;t++;if(t>s.ej){t=s.sj}}D++;if(D>s.ei){D=s.si}}u.forEach(function(F,E){F.forEach(function(H,G){q.setTile(E,G,H)})})}}};p.getMouseReader().onmousemove(n)}return m.gameEngine},fixPos:function(){var p=this.getGameEngine();var n=p.viewX;var r=p.viewY;var q=p.getGridLayer();var o=p.getWidth()-q.width;var m=p.getHeight()-q.height;o=o>0?0:o;m=m>0?0:m;n=b.min(b.max(n,o),0);r=b.min(b.max(r,m),0);p.set({viewX:n,viewY:r})},getMap:function(){var n=this;if(n.map==null){var m=n.getGameEngine();n.map=new c({sw:32,sh:32,width:m.getWidth()/32,height:m.getHeight()/32})}return n.map}};return h});